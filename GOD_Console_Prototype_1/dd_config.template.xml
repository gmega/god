<?xml version="1.0" encoding="ASCII"?>

<!-- No longer using doctypes or DTDs since I've developed my own validation scheme -->

<!-- Example configuration file for GOD Core Prototype 1 (was Distributed Debugger Prototype 1) -->
<dd_config>
	<!-- Each entry in the debugee list correspond to an individual node setup -->
	<node-list>
		<!-- "name" is used to identify the node and should be unique. 
			 "type" is either Java or C++. As of now we only support Java, so don't bother. 
			 "guid" can be either an integer between 0 and 254 or "auto". It should default
			 to "auto", but my validation scheme doesn't support defaults yet.
			 "CORBA-enabled" should be "yes" if your application uses CORBA (and 
 			 therefore is distributed) and "no" if it doesn't (enabled remote 
			 debugging only).
			 "launcher" should be "yes" if you want the debugger to launch the
			 remote application for you and "no" if you will launch it yourself
			 (and have the debugger attaching to it later).
			 
			 The list of required attributes for Java nodes can be found at
			 specs/Java.nodespec.xml. The list of additional attributes for
			 CORBA-enabled nodes can be found at specs/CORBAJava.nodespec.xml
		-->
		<node name="Node 1" type="Java" guid="auto" CORBA-enabled="yes" launcher="yes">
			<!-- If launcher = "yes", you must specify a launcher class which 
				 supports interface ddproto1.launcher.IApplicationLauncher. We
				 currently make available class JVMShellLauncher, capable of 
				 launching a JVM through a Shell Tunnel. 
				 
				 The list of required attributes for JVMShellLaunchers can be
				 found at specs/JVMShellLauncher.launcherspec.xml-->
			<launcher class="ddproto1.launcher.JVMShellLauncher">
				<!-- As said before, JVMShellLauncher requires a shell tunnel, 
					which is a class that implements interface 
					ddproto1.launcher.IShellTunnel. We currently support remote
					launching through SSH via class ExpectSSHTunnel. Remote login
					support could be easily added.
					
					The list of required attributes for ExpectSSHTunnels can be 
					found at specs/ExpectSSHTunnel.tunnelspec.xml -->
				<shell-tunnel class="ddproto1.launcher.ExpectSSHTunnel">
					<param key="host" value="localhost:22"/>
					<param key="user" value="dduser"/>
					<param key="pass" value="dduser"/>
					<param key="pass-type" value="plain"/>
				</shell-tunnel>
				
				<!-- Defines whether we'll keep the tunnel open and make the remote application's
					I/O (stdin, stdout, stderr and remote X interfaces) available locally (wait-until-dead)
					or we'll close the tunnel and write output to a log file (launch-and-close). -->
				<param key="tunnel-closure-policy" value="wait-until-dead"/>
				
				<!-- Java classpath -->
				<param key="classpath" 
					value="/fullpath/library1.jar:
							/fullpath/classpath2"/>
							
				<!-- Application's main class -->
				<param key="main-class" value="examples.gui.ExampleGUI"/>
				
				<!-- Port to be used by the local debugger -->
				<param key="jdwp-port" value="2005"/>
				
				<!-- Virtual machine parameters -->
				<param key="vm-parameters" 
					value="-Dcustom.props=custom.props -Djacorb.home=/usr/JacORB -Dorg.omg.CORBA.ORBClass=org.jacorb.orb.ORB -Dorg.omg.CORBA.SingletonClass=org.jacorb.orb.ORBSingleton"/>
					
				<!-- Application parameters -->
				<param key="app-parameters" value=""/>
			</launcher>
			
			<!-- Every node requires a source mapper, who should implement interface 
				ddproto1.sourcemapper.ISourceMapper. As usual, the list of attributes
				required by URLSourceMappers can be found at specs/URLSourceMapper.mapperspec.xml -->
			<source-mapper class="ddproto1.sourcemapper.URLSourceMapper">
				<param key="sourcepath" value="file:///home/dduser/sources"/>
			</source-mapper>
			
			<!--"stublist" says which classes are stubs. 
				"skeletonlist" says which classes are servants. I know, it should be servantlist - but I'm just
				too lazy to bother with this right now.
				One day we'll do IDL parsing and be able to inferr all this information anyway.
				
				Stubs and skeletons are separated by "dotted commas" - ";" -->
			<param key="stublist" value="Biblio._BibAdminStub;Biblio._BibliotecaStub;Biblio._BibliotecaVirtualStub;Biblio._ExemplarDeLivroStub;Biblio._LivroStub"/>
			<param key="skeletonlist" value=""/>
			
			<!-- This replication will go away when I rewrite the configuration module 
				"local-agent-address" should be the address of the host where the remote 
				application will be launched 
				"local-agent-port" should be its port. 
				Note they're equal to the parameters "jdwp-port" at the launcher configuration and 
				"host" at the tunnel configuration. . --> 
			<param key="local-agent-address" value="localhost"/>
			<param key="local-agent-port" value="2005"/>
		</node>
   </node-list>
</dd_config>