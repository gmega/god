package ddproto1.debugger.managing;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;

import org.apache.log4j.Logger;
import org.eclipse.debug.core.model.Breakpoint;

import com.sun.jdi.event.Event;
import com.sun.jdi.request.BreakpointRequest;

import ddproto1.commons.DebuggerConstants;
import ddproto1.debugger.eventhandler.processors.IJDIEventProcessor;
import ddproto1.debugger.request.DeferrableBreakpointRequest;
import ddproto1.debugger.request.IDeferrableRequest;
import ddproto1.debugger.request.IResolutionListener;
import ddproto1.util.MessageHandler;
import ddproto1.util.collection.UnorderedMultiMap;

public class JavaBreakpoint extends Breakpoint implements IResolutionListener, IJDIEventProcessor {

    private static final Logger logger = MessageHandler.getInstance().getLogger(JavaBreakpoint.class); 
    
	private String typeName;
	private int    line;
    
    private Map <String, IJavaDebugTarget> targetsByName = new HashMap<String, IJavaDebugTarget>();
    private UnorderedMultiMap<IJavaDebugTarget, BreakpointRequest> requestsByTarget = new 
        UnorderedMultiMap<IJavaDebugTarget, BreakpointRequest>(HashSet.class);
    	
	public String getModelIdentifier() {
		return DebuggerConstants.PLUGIN_ID;
	}
	
	public void addToTarget(IJavaDebugTarget target){
        try{
            VirtualMachineManager vmm = target.getVMManager();
            DeferrableBreakpointRequest dbr = 
                new DeferrableBreakpointRequest(vmm.getName(), typeName, line);
            
            /** We want to know of all requests generated by this deferrable request. */
            dbr.addResolutionListener(this);
            vmm.getDeferrableRequestQueue().addEagerlyResolve(dbr);
        
        }catch(Exception ex){
            logger.error("Failed to place breakpoint request.", ex);
            cancelForTarget(target);
            return;
        }
        
        registerTarget(target);
	}

    /** Called whenever a deferrable request is fulfilled */
    public void notifyResolution(IDeferrableRequest source, Object byproduct) {
        if(!source instanceof DeferrableBreakpointRequest)
            throw new InternalError("Unexpected request type.");
        
        DeferrableBreakpointRequest dbr = (DeferrableBreakpointRequest)source;
                        
        VirtualMachineManager vmm = target.getVMManager();
        vmm.getEventManager().addEventListener(source)
    }

    public void process(Event e) {
        // TODO Auto-generated method stub
        
    }

    public void setNext(IJDIEventProcessor iep) {
        // TODO Auto-generated method stub
        
    }

    public IJDIEventProcessor getNext() {
        // TODO Auto-generated method stub
        return null;
    }

    public void enable(boolean status) {
        // TODO Auto-generated method stub
        
    }
    
    protected void cancelForTarget(IJavaDebugTarget target){
        
    }
    
    protected void registerTarget(IJavaDebugTarget target){
        targetsByName.put(target.getVMManager().getName(), target);
    }
    
    protected IJavaDebugTarget getTarget(String targetName){
        return targetsByName.get(targetName);
    }

}
