/* The following code was generated by JFlex 1.3.5 on 9/27/05 1:07 AM */

package ddproto1.lexer;

/**
 * This class takes care of transforming certain patterns into more
 * diggestable integers.
 */
 

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.3.5
 * on 9/27/05 1:07 AM from the specification file
 * <tt>file:/home/giuliano/workspace/GOD Console Prototype 1/jflexspec/commands.jflex</tt>
 */
public class Lexer {

  /** This character denotes the end of file */
  final public static int YYEOF = -1;

  /** initial size of the lookahead buffer */
  final private static int YY_BUFFERSIZE = 16384;

  /** lexical states */
  final public static int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  final private static String yycmap_packed = 
    "\11\5\1\3\1\1\1\0\1\3\1\2\16\5\4\0\1\6\3\0"+
    "\1\10\3\0\1\15\1\16\2\0\1\14\1\0\1\11\1\0\12\17"+
    "\1\46\1\0\1\4\1\0\1\7\2\0\32\21\1\12\1\0\1\13"+
    "\1\0\1\10\1\0\1\27\1\43\1\31\1\40\1\34\1\24\1\21"+
    "\1\32\1\22\1\21\1\42\1\26\1\36\1\23\1\25\1\37\1\21"+
    "\1\33\1\35\1\41\1\30\1\45\1\44\1\20\2\21\4\0\41\5"+
    "\2\0\4\10\4\0\1\10\2\0\1\5\7\0\1\10\4\0\1\10"+
    "\5\0\27\10\1\0\37\10\1\0\u013f\10\31\0\162\10\4\0\14\10"+
    "\16\0\5\10\11\0\1\10\21\0\130\5\5\0\23\5\12\0\1\10"+
    "\13\0\1\10\1\0\3\10\1\0\1\10\1\0\24\10\1\0\54\10"+
    "\1\0\46\10\1\0\5\10\4\0\202\10\1\0\4\5\3\0\105\10"+
    "\1\0\46\10\2\0\2\10\6\0\20\10\41\0\46\10\2\0\1\10"+
    "\7\0\47\10\11\0\21\5\1\0\27\5\1\0\3\5\1\0\1\5"+
    "\1\0\2\5\1\0\1\5\13\0\33\10\5\0\3\10\15\0\4\5"+
    "\14\0\6\5\13\0\32\10\5\0\13\10\16\5\7\0\12\5\4\0"+
    "\2\10\1\5\143\10\1\0\1\10\10\5\1\0\6\5\2\10\2\5"+
    "\1\0\4\5\2\10\12\5\3\10\2\0\1\10\17\0\1\5\1\10"+
    "\1\5\36\10\33\5\2\0\3\10\60\0\46\10\13\5\1\10\u014f\0"+
    "\3\5\66\10\2\0\1\5\1\10\20\5\2\0\1\10\4\5\3\0"+
    "\12\10\2\5\2\0\12\5\21\0\3\5\1\0\10\10\2\0\2\10"+
    "\2\0\26\10\1\0\7\10\1\0\1\10\3\0\4\10\2\0\1\5"+
    "\1\10\7\5\2\0\2\5\2\0\3\5\11\0\1\5\4\0\2\10"+
    "\1\0\3\10\2\5\2\0\12\5\4\10\15\0\3\5\1\0\6\10"+
    "\4\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10\1\0\2\10"+
    "\1\0\2\10\2\0\1\5\1\0\5\5\4\0\2\5\2\0\3\5"+
    "\13\0\4\10\1\0\1\10\7\0\14\5\3\10\14\0\3\5\1\0"+
    "\11\10\1\0\3\10\1\0\26\10\1\0\7\10\1\0\2\10\1\0"+
    "\5\10\2\0\1\5\1\10\10\5\1\0\3\5\1\0\3\5\2\0"+
    "\1\10\17\0\2\10\2\5\2\0\12\5\1\0\1\10\17\0\3\5"+
    "\1\0\10\10\2\0\2\10\2\0\26\10\1\0\7\10\1\0\2\10"+
    "\1\0\5\10\2\0\1\5\1\10\6\5\3\0\2\5\2\0\3\5"+
    "\10\0\2\5\4\0\2\10\1\0\3\10\4\0\12\5\1\0\1\10"+
    "\20\0\1\5\1\10\1\0\6\10\3\0\3\10\1\0\4\10\3\0"+
    "\2\10\1\0\1\10\1\0\2\10\3\0\2\10\3\0\3\10\3\0"+
    "\10\10\1\0\3\10\4\0\5\5\3\0\3\5\1\0\4\5\11\0"+
    "\1\5\17\0\11\5\11\0\1\10\7\0\3\5\1\0\10\10\1\0"+
    "\3\10\1\0\27\10\1\0\12\10\1\0\5\10\4\0\7\5\1\0"+
    "\3\5\1\0\4\5\7\0\2\5\11\0\2\10\4\0\12\5\22\0"+
    "\2\5\1\0\10\10\1\0\3\10\1\0\27\10\1\0\12\10\1\0"+
    "\5\10\2\0\1\5\1\10\7\5\1\0\3\5\1\0\4\5\7\0"+
    "\2\5\7\0\1\10\1\0\2\10\4\0\12\5\22\0\2\5\1\0"+
    "\10\10\1\0\3\10\1\0\27\10\1\0\20\10\4\0\6\5\2\0"+
    "\3\5\1\0\4\5\11\0\1\5\10\0\2\10\4\0\12\5\22\0"+
    "\2\5\1\0\22\10\3\0\30\10\1\0\11\10\1\0\1\10\2\0"+
    "\7\10\3\0\1\5\4\0\6\5\1\0\1\5\1\0\10\5\22\0"+
    "\2\5\15\0\60\10\1\5\2\10\7\5\4\0\10\10\10\5\1\0"+
    "\12\5\47\0\2\10\1\0\1\10\2\0\2\10\1\0\1\10\2\0"+
    "\1\10\6\0\4\10\1\0\7\10\1\0\3\10\1\0\1\10\1\0"+
    "\1\10\2\0\2\10\1\0\4\10\1\5\2\10\6\5\1\0\2\5"+
    "\1\10\2\0\5\10\1\0\1\10\1\0\6\5\2\0\12\5\2\0"+
    "\2\10\42\0\1\10\27\0\2\5\6\0\12\5\13\0\1\5\1\0"+
    "\1\5\1\0\1\5\4\0\2\5\10\10\1\0\42\10\6\0\24\5"+
    "\1\0\2\5\4\10\4\0\10\5\1\0\44\5\11\0\1\5\71\0"+
    "\42\10\1\0\5\10\1\0\2\10\1\0\7\5\3\0\4\5\6\0"+
    "\12\5\6\0\6\10\4\5\106\0\46\10\12\0\51\10\7\0\132\10"+
    "\5\0\104\10\5\0\122\10\6\0\7\10\1\0\77\10\1\0\1\10"+
    "\1\0\4\10\2\0\7\10\1\0\1\10\1\0\4\10\2\0\47\10"+
    "\1\0\1\10\1\0\4\10\2\0\37\10\1\0\1\10\1\0\4\10"+
    "\2\0\7\10\1\0\1\10\1\0\4\10\2\0\7\10\1\0\7\10"+
    "\1\0\27\10\1\0\37\10\1\0\1\10\1\0\4\10\2\0\7\10"+
    "\1\0\47\10\1\0\23\10\16\0\11\5\56\0\125\10\14\0\u026c\10"+
    "\2\0\10\10\12\0\32\10\5\0\113\10\3\0\3\10\17\0\15\10"+
    "\1\0\4\10\3\5\13\0\22\10\3\5\13\0\22\10\2\5\14\0"+
    "\15\10\1\0\3\10\1\0\2\5\14\0\64\10\40\5\3\0\1\10"+
    "\3\0\2\10\1\5\2\0\12\5\41\0\3\5\2\0\12\5\6\0"+
    "\130\10\10\0\51\10\1\5\126\0\35\10\3\0\14\5\4\0\14\5"+
    "\12\0\12\5\36\10\2\0\5\10\u038b\0\154\10\224\0\234\10\4\0"+
    "\132\10\6\0\26\10\2\0\6\10\2\0\46\10\2\0\6\10\2\0"+
    "\10\10\1\0\1\10\1\0\1\10\1\0\1\10\1\0\37\10\2\0"+
    "\65\10\1\0\7\10\1\0\1\10\3\0\3\10\1\0\7\10\3\0"+
    "\4\10\2\0\6\10\4\0\15\10\5\0\3\10\1\0\7\10\17\0"+
    "\4\5\32\0\5\5\20\0\2\10\23\0\1\10\13\0\4\5\6\0"+
    "\6\5\1\0\1\10\15\0\1\10\40\0\22\10\36\0\15\5\4\0"+
    "\1\5\3\0\6\5\27\0\1\10\4\0\1\10\2\0\12\10\1\0"+
    "\1\10\3\0\5\10\6\0\1\10\1\0\1\10\1\0\1\10\1\0"+
    "\4\10\1\0\3\10\1\0\7\10\3\0\3\10\5\0\5\10\26\0"+
    "\44\10\u0e81\0\3\10\31\0\11\10\6\5\1\0\5\10\2\0\5\10"+
    "\4\0\126\10\2\0\2\5\2\0\3\10\1\0\137\10\5\0\50\10"+
    "\4\0\136\10\21\0\30\10\70\0\20\10\u0200\0\u19b6\10\112\0\u51a6\10"+
    "\132\0\u048d\10\u0773\0\u2ba4\10\u215c\0\u012e\10\2\0\73\10\225\0\7\10"+
    "\14\0\5\10\5\0\1\10\1\5\12\10\1\0\15\10\1\0\5\10"+
    "\1\0\1\10\1\0\2\10\1\0\2\10\1\0\154\10\41\0\u016b\10"+
    "\22\0\100\10\2\0\66\10\50\0\15\10\3\0\20\5\20\0\4\5"+
    "\17\0\2\10\30\0\3\10\31\0\1\10\6\0\5\10\1\0\207\10"+
    "\2\0\1\5\4\0\1\10\13\0\12\5\7\0\32\10\4\0\1\10"+
    "\1\0\32\10\12\0\132\10\3\0\6\10\2\0\6\10\2\0\6\10"+
    "\2\0\3\10\3\0\2\10\3\0\2\10\22\0\3\5\4\0";

  /** 
   * Translates characters to character classes
   */
  final private static char [] yycmap = yy_unpack_cmap(yycmap_packed);

  /** 
   * Translates a state to a row index in the transition table
   */
  final private static int yy_rowMap [] = { 
        0,    39,    39,    78,   117,   156,   195,   234,   273,   312, 
      351,   390,   429,   468,   507,   546,   585,   624,   663,   156, 
      702,   741,   780,   819,   858,   897,   234,   936,   975,  1014, 
     1053,  1092,  1131,  1170,  1209,  1248,  1287,  1326,  1365,  1404, 
     1443,  1482,    39,  1521,   741,   780,   819,  1560,  1599,   234, 
     1638,   234,  1677,  1716,  1755,  1794,  1833,  1872,  1911,  1950, 
     1989,  2028,  2067,  2106,  2145,   234,  2184,  2223,  2262,   234, 
      234,  2301,  2340,   234,  2379,   234,  2418,  2457,   234,  2496, 
     2535,  2574,  2613,  2652,  2691,  2730,  2769,  2808,  2847,  2886, 
      234,  2925,  2964,  3003,   234,   234,   234,  3042,   234,   234, 
      234,   234,  3081,  3003,   234
  };

  /** 
   * The packed transition table of the DFA (part 0)
   */
  final private static String yy_packed0 = 
    "\1\2\1\3\1\4\1\3\1\5\1\2\1\3\1\2"+
    "\1\6\6\2\1\7\2\10\1\11\3\10\1\12\1\13"+
    "\3\10\1\14\1\15\1\16\2\10\1\17\1\20\1\21"+
    "\1\22\2\10\1\2\50\0\1\3\52\0\2\23\1\0"+
    "\1\23\6\0\27\23\6\0\1\24\2\0\1\24\1\25"+
    "\5\0\27\24\1\26\11\0\1\27\5\0\1\7\1\30"+
    "\33\0\1\24\2\0\1\24\1\25\5\0\1\24\26\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\3\10\1\31\22\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\7\10\1\32\5\10\1\33\10\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\6\10\1\34\12\10\1\35\4\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\10\10\1\36\3\10"+
    "\1\37\11\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\1\40\24\10\1\41\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\10\10\1\42\1\43"+
    "\1\44\1\10\1\45\4\10\1\46\4\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\14\10\1\47"+
    "\11\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\12\10\1\50\13\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\2\10\1\51\23\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\13\10"+
    "\1\52\12\10\1\26\5\0\2\23\1\53\1\23\6\0"+
    "\27\23\11\0\1\54\7\0\26\54\20\0\1\55\46\0"+
    "\1\56\46\0\27\57\6\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\4\10\1\60\21\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\10\10\1\61\15\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\6\10\1\62\17\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\21\10\1\63\4\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\3\10\1\64"+
    "\22\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\15\10\1\65\10\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\2\10\1\66\23\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\7\10"+
    "\1\67\16\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\15\10\1\70\10\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\13\10\1\71\12\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\5\10\1\72\20\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\6\10\1\73\17\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\14\10\1\74"+
    "\11\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\21\10\1\75\4\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\13\10\1\76\12\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\6\10"+
    "\1\77\17\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\14\10\1\100\11\10\1\26\5\0\1\54"+
    "\2\0\1\54\1\25\3\0\1\101\1\0\27\54\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\5\10"+
    "\1\102\20\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\3\10\1\103\22\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\7\10\1\104\16\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\10\10\1\105\15\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\21\10\1\106\4\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\6\10\1\107"+
    "\17\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\17\10\1\110\6\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\2\10\1\111\23\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\24\10"+
    "\1\112\1\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\14\10\1\113\11\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\17\10\1\114\6\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\14\10\1\115\11\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\14\10\1\116\11\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\6\10\1\117"+
    "\17\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\7\10\1\120\16\10\1\26\10\0\1\121\5\0"+
    "\1\122\1\0\26\121\6\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\11\10\1\123\14\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\11\10\1\124\14\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\16\10\1\125\7\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\14\10\1\126\11\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\17\10\1\127"+
    "\6\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\11\10\1\130\14\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\11\10\1\131\14\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\7\10"+
    "\1\132\16\10\1\26\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\22\10\1\133\3\10\1\26\5\0\1\121"+
    "\2\0\1\121\1\134\1\135\1\0\1\134\1\0\1\122"+
    "\27\121\47\0\1\136\5\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\12\10\1\137\13\10\1\26\5\0\1\24"+
    "\2\0\1\24\1\25\5\0\1\24\12\10\1\140\13\10"+
    "\1\26\5\0\1\24\2\0\1\24\1\25\5\0\1\24"+
    "\14\10\1\141\11\10\1\26\5\0\1\24\2\0\1\24"+
    "\1\25\5\0\1\24\3\10\1\142\22\10\1\26\5\0"+
    "\1\24\2\0\1\24\1\25\5\0\1\24\21\10\1\143"+
    "\4\10\1\26\5\0\1\24\2\0\1\24\1\25\5\0"+
    "\1\24\21\10\1\144\4\10\1\26\5\0\1\24\2\0"+
    "\1\24\1\25\5\0\1\24\21\10\1\145\4\10\1\26"+
    "\5\0\1\24\2\0\1\24\1\25\5\0\1\24\20\10"+
    "\1\146\5\10\1\26\10\0\1\121\7\0\26\121\14\0"+
    "\1\147\52\0\1\150\34\0\1\24\2\0\1\24\1\25"+
    "\5\0\1\24\20\10\1\151\5\10\1\26\14\0\1\134"+
    "\1\0\1\122\30\0";

  /** 
   * The transition table of the DFA
   */
  final private static int yytrans [] = yy_unpack();


  /* error codes */
  final private static int YY_UNKNOWN_ERROR = 0;
  final private static int YY_ILLEGAL_STATE = 1;
  final private static int YY_NO_MATCH = 2;
  final private static int YY_PUSHBACK_2BIG = 3;

  /* error messages for the codes above */
  final private static String YY_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Internal error: unknown state",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * YY_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private final static byte YY_ATTRIBUTE[] = {
     0,  9,  9,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  9,  0,  1,  1,  1,  1, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
     0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,  0,  0,  0,  1,  1, 
     1,  1,  1,  1,  1,  1,  0,  1,  1
  };

  /** the input device */
  private java.io.Reader yy_reader;

  /** the current state of the DFA */
  private int yy_state;

  /** the current lexical state */
  private int yy_lexical_state = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char yy_buffer[] = new char[YY_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int yy_markedPos;

  /** the textposition at the last state to be included in yytext */
  private int yy_pushbackPos;

  /** the current text position in the buffer */
  private int yy_currentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int yy_startRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int yy_endRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn; 

  /** 
   * yy_atBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean yy_atBOL = true;

  /** yy_atEOF == true <=> the scanner is at the EOF */
  private boolean yy_atEOF;

  /* user code: */
	private Token makeToken(int tokentype){
		return new Token(tokentype);
	}
	
	private Token makeToken(int tokentype, String tokentext){
		return new Token(tokentype, tokentext);
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.yy_reader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the split, compressed DFA transition table.
   *
   * @return the unpacked transition table
   */
  private static int [] yy_unpack() {
    int [] trans = new int[3120];
    int offset = 0;
    offset = yy_unpack(yy_packed0, offset, trans);
    return trans;
  }

  /** 
   * Unpacks the compressed DFA transition table.
   *
   * @param packed   the packed transition table
   * @return         the index of the last entry
   */
  private static int yy_unpack(String packed, int offset, int [] trans) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do trans[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] yy_unpack_cmap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 1738) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   IOException  if any I/O-Error occurs
   */
  private boolean yy_refill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (yy_startRead > 0) {
      System.arraycopy(yy_buffer, yy_startRead, 
                       yy_buffer, 0, 
                       yy_endRead-yy_startRead);

      /* translate stored positions */
      yy_endRead-= yy_startRead;
      yy_currentPos-= yy_startRead;
      yy_markedPos-= yy_startRead;
      yy_pushbackPos-= yy_startRead;
      yy_startRead = 0;
    }

    /* is the buffer big enough? */
    if (yy_currentPos >= yy_buffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[yy_currentPos*2];
      System.arraycopy(yy_buffer, 0, newBuffer, 0, yy_buffer.length);
      yy_buffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = yy_reader.read(yy_buffer, yy_endRead, 
                                            yy_buffer.length-yy_endRead);

    if (numRead < 0) {
      return true;
    }
    else {
      yy_endRead+= numRead;  
      return false;
    }
  }


  /**
   * Closes the input stream.
   */
  final public void yyclose() throws java.io.IOException {
    yy_atEOF = true;            /* indicate end of file */
    yy_endRead = yy_startRead;  /* invalidate buffer    */

    if (yy_reader != null)
      yy_reader.close();
  }


  /**
   * Closes the current stream, and resets the
   * scanner to read from a new input stream.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>YY_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  final public void yyreset(java.io.Reader reader) throws java.io.IOException {
    yyclose();
    yy_reader = reader;
    yy_atBOL  = true;
    yy_atEOF  = false;
    yy_endRead = yy_startRead = 0;
    yy_currentPos = yy_markedPos = yy_pushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    yy_lexical_state = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  final public int yystate() {
    return yy_lexical_state;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  final public void yybegin(int newState) {
    yy_lexical_state = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  final public String yytext() {
    return new String( yy_buffer, yy_startRead, yy_markedPos-yy_startRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  final public char yycharat(int pos) {
    return yy_buffer[yy_startRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  final public int yylength() {
    return yy_markedPos-yy_startRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void yy_ScanError(int errorCode) {
    String message;
    try {
      message = YY_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = YY_ERROR_MSG[YY_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  private void yypushback(int number)  {
    if ( number > yylength() )
      yy_ScanError(YY_PUSHBACK_2BIG);

    yy_markedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int yy_input;
    int yy_action;

    // cached fields:
    int yy_currentPos_l;
    int yy_startRead_l;
    int yy_markedPos_l;
    int yy_endRead_l = yy_endRead;
    char [] yy_buffer_l = yy_buffer;
    char [] yycmap_l = yycmap;

    int [] yytrans_l = yytrans;
    int [] yy_rowMap_l = yy_rowMap;
    byte [] yy_attr_l = YY_ATTRIBUTE;

    while (true) {
      yy_markedPos_l = yy_markedPos;

      boolean yy_r = false;
      for (yy_currentPos_l = yy_startRead; yy_currentPos_l < yy_markedPos_l;
                                                             yy_currentPos_l++) {
        switch (yy_buffer_l[yy_currentPos_l]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          yy_r = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          yy_r = true;
          break;
        case '\n':
          if (yy_r)
            yy_r = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          yy_r = false;
          yycolumn++;
        }
      }

      if (yy_r) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean yy_peek;
        if (yy_markedPos_l < yy_endRead_l)
          yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        else if (yy_atEOF)
          yy_peek = false;
        else {
          boolean eof = yy_refill();
          yy_markedPos_l = yy_markedPos;
          yy_buffer_l = yy_buffer;
          if (eof) 
            yy_peek = false;
          else 
            yy_peek = yy_buffer_l[yy_markedPos_l] == '\n';
        }
        if (yy_peek) yyline--;
      }
      yy_action = -1;

      yy_startRead_l = yy_currentPos_l = yy_currentPos = 
                       yy_startRead = yy_markedPos_l;

      yy_state = yy_lexical_state;


      yy_forAction: {
        while (true) {

          if (yy_currentPos_l < yy_endRead_l)
            yy_input = yy_buffer_l[yy_currentPos_l++];
          else if (yy_atEOF) {
            yy_input = YYEOF;
            break yy_forAction;
          }
          else {
            // store back cached positions
            yy_currentPos  = yy_currentPos_l;
            yy_markedPos   = yy_markedPos_l;
            boolean eof = yy_refill();
            // get translated positions and possibly new buffer
            yy_currentPos_l  = yy_currentPos;
            yy_markedPos_l   = yy_markedPos;
            yy_buffer_l      = yy_buffer;
            yy_endRead_l     = yy_endRead;
            if (eof) {
              yy_input = YYEOF;
              break yy_forAction;
            }
            else {
              yy_input = yy_buffer_l[yy_currentPos_l++];
            }
          }
          int yy_next = yytrans_l[ yy_rowMap_l[yy_state] + yycmap_l[yy_input] ];
          if (yy_next == -1) break yy_forAction;
          yy_state = yy_next;

          int yy_attributes = yy_attr_l[yy_state];
          if ( (yy_attributes & 1) == 1 ) {
            yy_action = yy_state; 
            yy_markedPos_l = yy_currentPos_l; 
            if ( (yy_attributes & 8) == 8 ) break yy_forAction;
          }

        }
      }

      // store back cached position
      yy_markedPos = yy_markedPos_l;

      switch (yy_action) {

        case 44: 
          { return makeToken(Token.CLASS_BREAKSPEC, yytext()); }
        case 106: break;
        case 99: 
          { return makeToken(Token.SELECT); }
        case 107: break;
        case 96: 
          { return makeToken(Token.RESUME); }
        case 108: break;
        case 95: 
          { return makeToken(Token.ATTACH); }
        case 109: break;
        case 94: 
          { return makeToken(Token.LAUNCH); }
        case 110: break;
        case 26: 
          { return makeToken(Token.LIST, yytext()); }
        case 111: break;
        case 7: 
        case 8: 
        case 9: 
        case 10: 
        case 11: 
        case 12: 
        case 13: 
        case 14: 
        case 15: 
        case 16: 
        case 17: 
        case 24: 
        case 25: 
        case 27: 
        case 28: 
        case 29: 
        case 30: 
        case 31: 
        case 32: 
        case 33: 
        case 34: 
        case 35: 
        case 36: 
        case 37: 
        case 38: 
        case 39: 
        case 40: 
        case 41: 
        case 47: 
        case 48: 
        case 50: 
        case 52: 
        case 53: 
        case 54: 
        case 55: 
        case 56: 
        case 57: 
        case 58: 
        case 59: 
        case 60: 
        case 61: 
        case 62: 
        case 63: 
        case 66: 
        case 67: 
        case 68: 
        case 71: 
        case 72: 
        case 74: 
        case 76: 
        case 77: 
        case 79: 
        case 82: 
        case 83: 
        case 84: 
        case 85: 
        case 86: 
        case 87: 
        case 88: 
        case 89: 
        case 97: 
          { return makeToken(Token.WORD, yytext()); }
        case 112: break;
        case 69: 
          { return makeToken(Token.EXIT, yytext()); }
        case 113: break;
        case 70: 
          { return makeToken(Token.EVAL, yytext()); }
        case 114: break;
        case 73: 
          { return makeToken(Token.SHOW, yytext()); }
        case 115: break;
        case 75: 
          { return makeToken(Token.STEP, yytext()); }
        case 116: break;
        case 101: 
          { return makeToken(Token.THREAD, yytext()); }
        case 117: break;
        case 100: 
          { return makeToken(Token.DETECT, yytext()); }
        case 118: break;
        case 6: 
          { return makeToken(Token.NUMBER, yytext()); }
        case 119: break;
        case 46: 
          { return makeToken(Token.HEX_ID, yytext()); }
        case 120: break;
        case 49: 
          { return makeToken(Token.ALL); }
        case 121: break;
        case 51: 
          { return makeToken(Token.RUN); }
        case 122: break;
        case 65: 
          { return makeToken(Token.INFO); }
        case 123: break;
        case 78: 
          { return makeToken(Token.KILL); }
        case 124: break;
        case 98: 
          { return makeToken(Token.RUNSCRIPT, yytext()); }
        case 125: break;
        case 90: 
          { return makeToken(Token.BREAKPOINT, yytext()); }
        case 126: break;
        case 45: 
          { return makeToken(Token.DOTTED_ID, yytext());  }
        case 127: break;
        case 42: 
          { return makeToken(Token.MACHINE_ID, yytext()); }
        case 128: break;
        case 2: 
        case 3: 
          {   }
        case 129: break;
        case 104: 
          { return makeToken(Token.SUSPEND);  }
        case 130: break;
        case 1: 
        case 4: 
        case 5: 
          { return makeToken(Token.UNIDENTIFIED, yytext()); }
        case 131: break;
        case 103: 
          { return makeToken(Token.METHOD_BREAKSPEC, yytext()); }
        case 132: break;
        default: 
          if (yy_input == YYEOF && yy_startRead == yy_currentPos) {
            yy_atEOF = true;
            return null;
          } 
          else {
            yy_ScanError(YY_NO_MATCH);
          }
      }
    }
  }


}
