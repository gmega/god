- OK. Test multiple optional children of different types for same brach key precondition.
- OK. Test cardinality constraint checking.
- DEFERRED. Add a binary 'incarnable' attribute to the specs. Validate incarnable attribute against type attribute in the configuration file.
- DEFERRED. Add metadata attributes that don't go to the actual incarnation. 
- DEFERRED. Let metadata attributes be specified both in the configuration file and the deployment descriptor.
- Semi-OK. Add default values. 
- OK. Add context.
- DEFERRED. Allow optional attributes (which are different from conditional attributes).

- Implement the distributed tester for testing DistributedThread and DistributedThreadManager properly.
- Set up test scenario.
- Test the distributed tester.
- Test DistributedThread and DistributedThreadManager.


Debugger:

- The event processing chains need some serious attention. The current design is crying for a refactoring
  in the sense of making the processing chains assembly explicit (i.e. the event processing chains should be
  configurable via an XML file).

- When a machine dies or gets reinserted, we must clean system-wide information about its threads. This includes
  the thread UUID registry and god knows what else. (already being worked on).
  
- OK. Make step overs work. 
- OK. Test the full <CORBA Client>-<Reuters Server>-<JacORB NS> cycle. 

- The thread state relies heavily in pending step requests. However, the resume/suspend
  methods clear the step requests. Investigate how that affects the illusions, especially
  from the user point of view.

- Requests must be reworked. They currently advertise preconditions that never get satisfied and thus stay
  forever into the deferrable request queue. Internally they work because they acquire loaded classes. I think
  the ideal solution would be to eliminate the return null/non-null protocol and add a callback so that the request
  can adjust their advertised preconditions. 
  
Critical:

- I hadn't taken classloader into consideration when I first built the deferrable request subsystem.
  It'll need some serious reworking to work properly when we have the same class being loaded by more
  than one classloader. This is partly my fault (I didn't know how classloaders worked then) and partly
  Sun's lousy example's fault - JDB. JDB is broken with multiple classloaders as well. 
  
- Must fix the VirtualMachineManager so that it can accept connect/disconnect or connect/kill 
  sequences without breaking. This could involve poking other classes. (low priority)
  
More on cleanup issues:

- Distributed Thread Manager must get rid of/verify all threads that die when a VMDeath/Disconnect
  occurs. It's possible that distributed threads get broken.

- All deferrable requests that trigger multiple event requests (and store them) must arrange
  to flush those requests when their VM dies or is disconnected. This is only an issue if we're
  going to reuse the VMM - if we're to create a new VMM for each launch/connect, than this
  is not an issue. I actually think that JDT's VMM equivalent is disposable, so this is probably
  not an issue.
  
SocketServer issues:

- The connection pooling/queuing mechanism doesn't work as expected, due to the fact that I handn't
  thought well enough about the problem. I do the thread pooling with connection queuing, but the 
  problem is that my clients also do connection pooling. This essentially means that they don't 
  release their connections often, which in turn means that threads aren't released often as well.
  This combination leads to a situation where the queuing mechanism leads to deadlock: if the clients
  attempt to make more connections than there are threads available, the thread pool is depleted. Since
  clients pool their connections, they never release the server-side threads, which means that queued
  connections are never serviced.
  
  Workaround: Ensure that the clients don't pool too many connections by reducing their thread pool.
  
GUI:

TODO: Allow importing java configurations from applications in the workspace. Set default configurations
      for server address, etc.
      
Configuration module:

- Some attributes are type-global. (solved by making default in spec).
- Some attributes are per-type unique. (this will be more troublesome).


Setup bites:

- The xml specs have an absolute path pointer to their dtds. If that isn't changed at 
  deployment, the specs will malfunction and cause weird exceptions when the user tries
  to create a launch configuration.
    
Possible sources of problems (can't be solved because I haven't understood them fully yet):

- The registering protocol relies on the thread being suspended in order to perform ID
  extraction. If the user (or someone else) resumes the thread through the GUI (for 
  instance), registration will fail. We must ensure that the suspension caused by the 
  registration protocol isn't ran over by some other thread. Only the EventDispatcher 
  may resume registration events. I must (at the very least) formulate an assertion for this,
  so I know when it happens.